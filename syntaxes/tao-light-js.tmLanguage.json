{
  "scopeName": "source.tao.lightjs",
  "patterns": [
    {
      "begin": "\\(",
      "end": "\\)|(?=%>)",
      "patterns": [
        {
          "match": "\\b(?:let|const|var)\\b",
          "name": "storage.type.js"
        },
        {
          "match": "\\b(?:of|in)\\b",
          "name": "keyword.operator.expression.in.js"
        },
        {
          "match": "\\w+(?=\\()",
          "name": "entity.name.function.tao"
        },
        {
          "match": "['\"`].*?['\"`]",
          "name": "string.quoted.js"
        },
        {
          "match": "\\b(?:true|false|null|undefined)\\b",
          "name": "constant.language.js"
        },
        {
          "match": "[+\\-*/=<>!]+",
          "name": "keyword.operator.js"
        },
        {
          "match": "\\d+(?:\\.\\d+)?",
          "name": "constant.numeric.js"
        },
        {
          "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "name": "variable.other.constant.js"
        }
      ]
    },
    {
      "begin": "`",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.template.begin.js" }
      },
      "end": "`",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.template.end.js" }
      },
      "name": "string.quoted.template.js",
      "patterns": [
        { "match": "\\\\.", "name": "constant.character.escape.js" },
        {
          "begin": "\\${",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.template-expression.begin.js" }
          },
          "end": "}",
          "endCaptures": {
            "0": { "name": "punctuation.definition.template-expression.end.js" }
          },
          "name": "meta.embedded.expression.js",
          "patterns": [
            { "match": "\\b(let|const|var)\\b", "name": "storage.type.js" },
            { "match": "\\b(of|in)\\b", "name": "keyword.operator.expression.in.js" },
            { "match": "\\.", "name": "punctuation.accessor.js" },
            { "match": "\\b[A-Za-z_$][\\w$]*\\b", "name": "variable.other.readwrite.js" },
            { "match": "[0-9]+(?:\\.[0-9]+)?", "name": "constant.numeric.decimal.js" },
            {
              "match": "'(?:[^'\\\\]|\\\\.)*'|\\\"(?:[^\\\"\\\\]|\\\\.)*\\\"",
              "name": "string.quoted.js"
            }
          ]
        }
      ]
    },

    {
      "match": "['\"].*?['\"]",
      "name": "string.quoted.js"
    },
    {
      "match": "\\w+(?=\\()",
      "name": "entity.name.function.js"
    },
    {
      "match": "\\b(?:let|const|var|return|if|else|for|while|do|switch|case|break|continue|try|catch|finally|throw|new|typeof|instanceof)\\b",
      "name": "keyword.control.js"
    },
    {
      "match": "\\b(?:true|false|null|undefined)\\b",
      "name": "constant.language.js"
    },
    {
      "match": "[+\\-*/=<>!]+",
      "name": "keyword.operator.js"
    },
    {
      "match": "\\d+(?:\\.\\d+)?",
      "name": "constant.numeric.js"
    },
    {
      "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b",
      "name": "variable.other.constant.js"
    }
  ]
}
